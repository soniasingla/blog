{"version":3,"sources":["webpack:///./src/components/TagList/TagList.js","webpack:///./src/components/Pagination/Pagination.js","webpack:///./src/templates/blog-index.js","webpack:///./src/components/PostAbbrev/PostAbbrev.js","webpack:///./src/components/SEO/SEO.js"],"names":["TagList","tags","baseUrl","restProps","className","map","text","key","Tag","url","defaultProps","Pagination","currentPage","totalPageNumber","befMark","to","nextMark","Array","from","length","_","ind","pageNum","BlogIndex","pageContext","data","location","numPages","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","useLang","lang","homeLink","Layout","SEO","formatMessage","keywords","Bio","count","totalCount","node","frontmatter","fields","slug","PostAbbrev","base","date","timeToRead","excerpt","description","pageQuery","excerptPart","tagsPart","dangerouslySetInnerHTML","__html","style","margin","fontFamily","fontSize","rhythm","marginBottom","boxShadow","rel","formatDate","formatReadingTime","meta","useStaticQuery","metaDescription","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","join"],"mappings":"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","file":"component---src-templates-blog-index-js-74a77c707017dfcd42c9.js","sourcesContent":["import './TagList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../Tag';\n\nfunction TagList({ tags, baseUrl, ...restProps }) {\n  return (\n    <ul className=\"tag-ul\" {...restProps}>\n      {tags.map(text => (\n        <li key={text}>\n          <Tag text={text} url={`${baseUrl}/${text}`} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nTagList.propTypes = {\n  tags: PropTypes.array.isRequired,\n  baseUrl: PropTypes.string,\n};\n\nTagList.defaultProps = {\n  baseUrl: '',\n};\n\nexport default TagList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport './Pagination.css';\n\nconst Pagination = ({ currentPage, totalPageNumber }) => {\n  const befMark =\n    currentPage === 1 ? (\n      <span className=\"disabled\">&laquo;</span>\n    ) : (\n      <Link to={`/${currentPage - 1}`}>&laquo;</Link>\n    );\n  const nextMark =\n    currentPage === totalPageNumber ? (\n      <span className=\"disabled\">&raquo;</span>\n    ) : (\n      <Link to={`/${currentPage + 1}`}>&raquo;</Link>\n    );\n\n  return (\n    <div className=\"pagination\">\n      {befMark}\n      {Array.from({ length: totalPageNumber })\n        .map((_, ind) => ind + 1)\n        .map((pageNum) => {\n          return pageNum === currentPage ? (\n            <span key={`pageNum-${pageNum}`} className=\"active\">\n              {pageNum}\n            </span>\n          ) : (\n            <Link key={`pageNum-${pageNum}`} to={`/${pageNum}`}>\n              {pageNum}\n            </Link>\n          );\n        })}\n      {nextMark}\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  currentPage: PropTypes.number,\n  totalPageNumber: PropTypes.number,\n};\n\nPagination.defaultProps = {\n  currentPage: 1,\n  totalPageNumber: 1,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Bio from 'components/Bio';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport Pagination from 'components/Pagination';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nfunction BlogIndex({ pageContext, data, location }) {\n  const { from, to, currentPage, numPages } = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  const { lang, homeLink } = useLang();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={formatMessage('tIndTitle')} keywords={formatMessage('taIndKeywords')} />\n      <aside>\n        <Bio />\n      </aside>\n      <h4>\n        {formatMessage('tfIndCountPosts', { count: data.allMarkdownRemark.totalCount, from, to })}\n      </h4>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <PostAbbrev\n            lang={lang}\n            base={homeLink}\n            key={node.fields.slug}\n            slug={node.fields.slug}\n            date={node.frontmatter.date}\n            timeToRead={node.timeToRead}\n            title={title}\n            excerpt={node.frontmatter.description || node.excerpt}\n            tags={node.frontmatter.tags}\n          />\n        );\n      })}\n      <Pagination currentPage={currentPage} totalPageNumber={numPages} />\n    </Layout>\n  );\n}\n\nBlogIndex.propTypes = {\n  pageContext: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nBlogIndex.defaultProps = {};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query($langKey: String!, $skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nfunction PostAbbrev({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nfunction SEO({ description, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            lang\n          }\n        }\n      }\n    `,\n  );\n\n  const { lang } = useLang();\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || site.siteMetadata.lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n  description: '',\n};\n\nexport default SEO;\n"],"sourceRoot":""}